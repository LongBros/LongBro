1.spring mvc与Struts2的区别
1）struts2框架是类级别的拦截，每次来了请求就创建一个Action，然后调用setter getter方法把request中的数据注入
struts2实际上是通过setter getter方法与request打交道的 
struts2中，一个Action对象对应一个request上下文
SpringMVC不同，SpringMVC是方法级别的拦截，拦截到方法后根据参数上的注解，把request数据注入进去
在SpringMVC中，一个方法对应一个request上下文 
2）由于上边原因：SpringMVC的Controller是单实例的，方法之间基本上独立的，独享request response数据，请求
数据通过参数获取，处理结果通过ModelMap交回给框架方法之间不共享变量  
而struts2的Action是多实例的，虽然方法之间也是独立的，但其所有Action变量是共享的，这不会影响程序运行，却给我
们编码 读程序时带来麻烦，每次请求就创建一个新的Action，一个action对象对应一个request上下文 
3）由于Struts2需要针对每个request进行封装，把request，session等servlet生命周期的变量封装成一个一个
Map，供给每个Action使用，并保证线程安全，所以在原则上，是比较耗费内存的。
4）拦截器实现机制上，Struts2有自己的interceptor机制，SpringMVC用的是独立的AOP方式，这样导致Struts2
的配置文件量还是比SpringMVC大。
5）SpringMVC的入口是servlet，而Struts2是filter
6）spring MVC和Spring是无缝的。从这个项目的管理和安全上也比Struts2高
7） 设计思想上，Struts2更加符合OOP的编程思想， SpringMVC就比较谨慎，在servlet上扩展。
8）SpringMVC开发效率和性能高于Struts2。
9）SpringMVC可以认为已经100%零配置。

2.mybatis与hibernate的区别
第一方面：开发速度的对比
就开发速度而言，Hibernate的真正掌握要比Mybatis来得难些。Hibernate门槛较高，Mybatis框架相对简单很容易
上手，但也相对简陋些。个人觉得要用好Mybatis还是首先要先理解好Hibernate。
第二方面：开发工作量的对比
Hibernate和MyBatis都有相应的代码生成工具。可以生成简单基本的DAO层方法。针对高级查询，Mybatis需要手动编写
SQL语句，以及ResultMap。而Hibernate有良好的映射机制，开发者无需关心SQL的生成与结果映射，可以更专注于业务流程。
第三方面：sql优化方面
Hibernate的查询会将表中的所有字段查询出来，这一点会有性能消耗。Hibernate也可以自己写SQL来指定需要查询的
字段，但这样就破坏了Hibernate开发的简洁性。而Mybatis的SQL是手动编写的，所以可以按需求指定查询的字段。
第四方面：对象管理的对比
Hibernate 是完整的对象/关系映射解决方案，它提供了对象状态管理（state management）的功能，使开发者不再需要
理会底层数据库系统的细节。也就是说，相对于常见的 JDBC/SQL 持久层方案中需要管理 SQL 语句，Hibernate采用了
更自然的面向对象的视角来持久化 Java 应用中的数据。
换句话说，使用 Hibernate 的开发者应该总是关注对象的状态（state），不必考虑 SQL 语句的执行。这部分细节已经
由 Hibernate 掌管妥当，只有开发者在进行系统性能调优的时候才需要进行了解。而MyBatis在这一块没有文档说明，
用户需要对对象自己进行详细的管理。
第五方面：缓存机制
Hibernate有一级缓存是Session缓存，二级缓存是SessionFactory级的缓存。
Mybatis也有查询缓存与二级缓存，

因为Hibernate对查询对象有着良好的管理机制，用户无需关心SQL，所用hibernate的缓存机制会比mybatis完善。

相同点：Hibernate与MyBatis都可以是通过SessionFactoryBuider由XML配置文件生成SessionFactory，然后由SessionFactory 生成Session，最后由Session来开启执行事务和SQL语句。其中SessionFactoryBuider，SessionFactory，Session的生命周期都是差不多的。
Hibernate和MyBatis都支持JDBC和JTA事务处理。
Mybatis优势
MyBatis可以进行更为细致的SQL优化，可以减少查询字段。
MyBatis容易掌握，而Hibernate门槛较高。
Hibernate优势
Hibernate的DAO层开发比MyBatis简单，Mybatis需要维护SQL和结果映射。
Hibernate对对象的维护和缓存要比MyBatis好，对增删改查的对象的维护要方便。
Hibernate数据库移植性很好，MyBatis的数据库移植性不好，不同的数据库需要写不同SQL。
Hibernate有更好的二级缓存机制，可以使用第三方缓存。MyBatis本身提供的缓存机制不佳。


3.谈谈反射和框架的联系？
反射允许java在运行时动态的加载类，并获取类的属性调用类的方法。这就使得java编码变得更加灵活。很多框架都是通过
反射来实现对象的创建和使用的。比如说Spring 对象的创建，都是通过反射来完成的，我们在配置文件中，定义类的依赖
关系，并制定类的全路径。这就为反射创建提供条件。

4.SSM框架的数据是怎样流的。
Ssm框架即：springmvc,spring,mybatis三个框架。
页面发起请求，到服务器响应请求，整个流程如下：
页面发起请求=》springmvc根据请求路径匹配对应的controller=>controller调用对应的services模型层方法=》
services调用mybatis的dao层接口方法=》执行对应的mybatis sql语句=》逐级返回。。。

5、Spring下的注解？
@RequestMapping请求和方法映射
@RequestBody接收客户端处传入的json数据
@ResponseBody返回客户端json数据  
@Controller代表控制层
@Service代表业务层
@Repository代表数据层
@Component把bean添加到Spring容器
@Autowired自动注入，按照类型注入
@Resource自定注入，可以按照类型注入也可以按照字注入
@PathVariable--restFul风格的时候使用
@Param表单参数和方法形参不一样时使用

注册：@Controller @Service @Component
注入：@Autowired @Resource
请求地址：@RequestMapping
返回具体数据类型而非跳转：@ResponseBody

6.Mybatis里XML怎么传数据？
Mybatis接口向xml中传值是通过接口方法的参数传递，xml中接收对应的参数可以用#{}和${}来获取，
并用parameterType定义参数的数据类型。而数据从xml中返回则通过定义resultType,将sql查询的结果映射成对应的
resultType返回给dao层接口作为接口返回值。
传递多个值：
1、可以在dao接口中定义参数时加上@Param(name)给参数取个名称，后台就直接根据#{name}取值
2、亦可以用#{数字}来取值，如果传递三个参数，可以用#{0}，#{1}，#{2}来取值。
3、将值放入一个map中，dao层接口参数传入一个map,xml中用#{key}取值。同时xml中parameterType声明为java.util.Map。
传递一个对象：当参数传入的是一个对象的时候，对应的xml中应该指定parameterType为对应的对象。然后取值的话直接通过#{对象的属性}来获取。

参考地址：http://blog.csdn.net/z69183787/article/details/51589244