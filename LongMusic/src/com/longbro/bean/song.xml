<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 1.添加歌曲 2.插入歌曲 3.根据歌名模糊搜索歌曲 4.按分页查询歌曲 5.根据id查询歌曲 6.根据资源id查询歌曲-->
<!-- 7.根据歌名精确查询歌曲 8.查询歌星的歌曲 9.编辑歌曲信息 10.根据录入时间查询歌曲数量-->
<mapper namespace="com.longbro.bean.song">
	<!--将值放入一个map中，dao层接口参数传入一个map,xml中用#{key}取值。同时xml中parameterType声明为java.util.Map。 -->
	<insert id="addSong" parameterType="java.util.HashMap">
		insert into song(sourceId,songName,singer,duration,album,imgPath,releaseTime,website,descr,inputTime)
		values
		(#{sourceId},#{songName},#{singer},#{duration},#{album},#{imgPath},#{releaseTime},#{website},#{descr},#{time})
	</insert>
	<insert id="insertSong" parameterType="java.util.HashMap">
		insert into song(sourceId,songName)
		values(#{sourceId},#{songName})
	</insert>
	<select id="querySongs" resultType="java.util.HashMap">
		select 
		*
		from song
		where songName like concat ('%','${_parameter}','%')
	</select>
	<!-- <select id="queryAllSongs"  resultType="com.longbro.bean.Song" parameterType="java.lang.Integer">
		select 
		*
		from song limit #{_parameter},50;
   </select> -->
	<!-- 实现比如“热歌榜”的功能 -->
	<select id="querySongsBy" resultType="java.util.HashMap">
		select * from song order by playNum desc limit 0,#{num};
		<!-- <if test="orderBySql!=null and orderBySql!=''">
			order by playNum desc
		</if>
		<if test="limitSql!=null and limitSql!=''">
			 limit 0,#{num};
		</if> -->
	</select>
	<select id="queryAllSongs"  resultType="com.longbro.bean.Song">
		select 
		*
		from song 
		where can_play=1
		order by sortNum desc limit #{start},50;
	</select>
	<select id="querySongById"  resultType="com.longbro.bean.Song">
		select
		* 
		from song
		where id=${_parameter}
	</select>
	<select id="querySongBySId"  resultType="com.longbro.bean.Song">
		select
		id, 
		sourceId,
		songName,
		singer,
		duration,
		album,
		imgPath,
		releaseTime,
		lyric
		from song
		where sourceId='${_parameter}'
	</select>
	<select id="querySongsBySName"  resultType="com.longbro.bean.Song">
		select 
		* 
		from song
		where songName=#{_parameter}
	</select>
	<select id="querySongsBySinger"  resultType="java.util.HashMap">
		select 
		*
		from song
		where singer like concat ('%',#{_parameter},'%')<!-- where singer=#{singer} -->
	</select>
	<select id="querySongsByLyric"  resultType="java.util.HashMap">
		select 
		*
		from song
		where lyric like concat ('%',#{_parameter},'%')
	</select>
	<update id="editSong" parameterType="com.longbro.bean.Song">
		update song set 
		sourceId=#{sourceId},
		songName=#{songName},
		singer=#{singer},
		duration=#{duration},
		album=#{album},
		imgPath=#{imgPath},
		releaseTime=#{releaseTime},
		website=#{website},
		descr=#{descr},
		lyric=#{lyric}
		where id=#{id}
	</update>
	<!-- 10.根据录入时间查询歌曲数量 -->
	<select id="findSongNumBy" resultType="java.lang.Integer">
		select count(1) from song 
		where 1=1 
		<if test="_parameter!=null and _parameter!=''">
			and inputTime &gt;= #{_parameter}
		</if>
	</select>
	<select id="queryAllSinger" resultType="java.util.HashMap">
		SELECT DISTINCT singer FROM song;
	</select>
	<!-- 2020-03-20修改接口 -->
	<select id="strongQuerySongs" resultType="java.util.HashMap">
		
		<!-- 最终版 既可以去重，又可以得到匹配的类型 -->
		SELECT *,
		CASE 
		WHEN songName like concat ('%',#{_parameter},'%') then 1
		WHEN singer like concat ('%',#{_parameter},'%') then 2
		WHEN lyric like concat ('%',#{_parameter},'%') then 3
		ELSE 0
		END match_type
		 FROM song 
		 WHERE (songName like concat ('%',#{_parameter},'%')) 
		 or (singer like concat ('%',#{_parameter},'%')) 
		 or (lyric like concat ('%',#{_parameter},'%'));
		<!-- 使用distinct既可以去重，但不可以得到匹配的类型 -->
		<!-- SELECT DISTINCT(id),sourceId,songName,singer,duration,album,imgPath,releaseTime,website,descr,
				inputTime,lyric,playNum1,sortNum,playNum,status,use_time,can_play FROM(
			SELECT *,1 AS match_type FROM song WHERE songName like concat ('%',#{_parameter},'%')
			UNION SELECT *,2 AS match_type FROM song WHERE singer like concat ('%',#{_parameter},'%')
			UNION SELECT *,3 AS match_type FROM song WHERE lyric like concat ('%',#{_parameter},'%') 
		) song; -->
		<!-- 原本的sql，可以得到匹配的类型，但不能去重 -->
		<!-- SELECT *,1 AS match_type FROM song WHERE songName like concat ('%',#{_parameter},'%')
		UNION SELECT *,2 AS match_type FROM song WHERE singer like concat ('%',#{_parameter},'%')
		UNION SELECT *,3 AS match_type FROM song WHERE lyric like concat ('%',#{_parameter},'%') ; -->
	</select>
	<select id="strongQuerySongs1" resultType="java.util.HashMap">
		<!-- 终极版 既可以去重，又可以得到更详细的匹配的类型 -->
		SELECT *,
		CASE 
		WHEN songName like concat ('%',#{_parameter},'%') AND singer like concat ('%',#{_parameter},'%') 
			 AND lyric like concat ('%',#{_parameter},'%') THEN 1 <!--歌名、歌手、歌词中均含有-->
		WHEN songName like concat ('%',#{_parameter},'%') AND singer like concat ('%',#{_parameter},'%') THEN 2 <!--歌名、歌手含有-->
		WHEN songName like concat ('%',#{_parameter},'%') AND lyric like concat ('%',#{_parameter},'%') THEN 3 <!--歌名、歌词含有-->
		WHEN singer like concat ('%',#{_parameter},'%') AND lyric like concat ('%',#{_parameter},'%') THEN 4 <!--歌名、歌词含有-->
		
		WHEN songName like concat ('%',#{_parameter},'%') then 5 <!--歌名含有-->
		WHEN singer like concat ('%',#{_parameter},'%') then 6 <!--歌手含有-->
		WHEN lyric like concat ('%',#{_parameter},'%') then 7 <!--歌词含有-->
		ELSE 0 <!--均不含有-->
		END match_type
		 FROM song WHERE (songName like concat ('%',#{_parameter},'%')) or (singer like concat ('%',#{_parameter},'%')) or (lyric like concat ('%',#{_parameter},'%') )
				
	</select>
</mapper>